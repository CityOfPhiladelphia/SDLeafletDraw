{"version":3,"sources":["../../es6/draw/DrawToolbar.js"],"names":[],"mappings":"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","file":"DrawToolbar.js","sourcesContent":["/** @flow\n * StratoDem Analytics : DrawToolbar\n * Principal Author(s) : Michael Clawar\n * Secondary Author(s) :\n * Description : Adapted from Leaflet.Draw\n *\n * (c) 2012-2017, Jacob Toye, Jon West, Smartrak, Leaflet\n *\n *  (c) 2016- StratoDem Analytics, LLC\n *  All Rights Reserved\n */\n\nimport L from 'leaflet';\n\nimport Toolbar from '../Toolbar';\nimport drawLocal from '../draw';\nimport { Circle, Marker, Polyline, Polygon, Rectangle } from './handler/index';\n\n\n/** TYPE DEFINITIONS **/\ntype T_ENABLED = Object;\n\ntype T_OPTIONS = {\n  polyline?: T_ENABLED,\n  polygon?: T_ENABLED,\n  rectangle?: T_ENABLED,\n  circle?: T_ENABLED,\n  marker?: T_ENABLED,\n};\n\ntype T_MH = {\n  enabled: T_ENABLED,\n  handler: Object,\n  title: string,\n};\ntype T_ARR_MH = Array<T_MH>;\ntype T_ACT = {\n  enabled?: T_ENABLED,\n  title: string,\n  text: string,\n  callback: () => void,\n  context: Object,\n}\ntype T_ARR_ACT = Array<T_ACT>;\n\nconst INITIAL_OPTIONS: T_OPTIONS = {\n  polyline: {},\n  polygon: {},\n  rectangle: {},\n  circle: {},\n  marker: {},\n};\n\n\nexport default class DrawToolbar extends Toolbar {\n  _toolbarClass: string;\n\n  static options = INITIAL_OPTIONS;\n  static TYPE = 'draw';\n\n  initialize(options: T_OPTIONS): void {\n    const updatedOptions = {};\n\n    // Merge in options\n    Object.keys(DrawToolbar.options).forEach((type) => {\n      if (options[type])\n        updatedOptions[type] = {...DrawToolbar.options[type], ...options[type]};\n    });\n\n    this._toolbarClass = 'leaflet-draw-draw';\n    super.initialize(updatedOptions);\n  }\n\n  /** Get mode handlers information **/\n  getModeHandlers(map: L.Map): T_ARR_MH {\n    return [\n      {\n        enabled: this.options.polyline,\n        handler: new Polyline(map, this.options.polyline),\n        title: drawLocal.draw.toolbar.buttons.polyline,\n      },\n      {\n        enabled: this.options.polygon,\n        handler: new Polygon(map, this.options.polygon),\n        title: drawLocal.draw.toolbar.buttons.polygon,\n      },\n      {\n        enabled: this.options.rectangle,\n        handler: new Rectangle(map, this.options.rectangle),\n        title: drawLocal.draw.toolbar.buttons.rectangle,\n      },\n      {\n        enabled: this.options.circle,\n        handler: new Circle(map, this.options.circle),\n        title: drawLocal.draw.toolbar.buttons.circle,\n      },\n      {\n        enabled: this.options.marker,\n        handler: new Marker(map, this.options.marker),\n        title: drawLocal.draw.toolbar.buttons.marker,\n      },\n    ];\n  }\n\n  /** Get action information **/\n  getActions(handler: Object): T_ARR_ACT {\n    return [\n      {\n        enabled: handler.completeShape,\n        title: drawLocal.draw.toolbar.finish.title,\n        text: drawLocal.draw.toolbar.finish.text,\n        callback: handler.completeShape,\n        context: handler,\n      },\n      {\n        enabled: handler.deleteLastVertex,\n        title: drawLocal.draw.toolbar.undo.title,\n        text: drawLocal.draw.toolbar.undo.text,\n        callback: handler.deleteLastVertex,\n        context: handler,\n      },\n      {\n        title: drawLocal.draw.toolbar.actions.title,\n        text: drawLocal.draw.toolbar.actions.text,\n        callback: this.disable,\n        context: this,\n      },\n    ];\n  }\n\n  /** Sets the options to the toolbar **/\n  setOptions(options: T_OPTIONS): void {\n    L.setOptions(this, options);\n\n    Object.keys(this._modes).forEach((type) => {\n      if (options[type])\n        this._modes[type].handler.setOptions(options[type]);\n    });\n  }\n}\n"]}