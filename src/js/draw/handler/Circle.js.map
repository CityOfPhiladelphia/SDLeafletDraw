{"version":3,"sources":["../../../es6/draw/handler/Circle.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAUA;;;;AAEA;;;;AACA;;AACA;;;;AAEA;;;;AAGA,IAAM,yBAAgD;AACpD,gBAAc;AACZ,YAAQ,IADI;AAEZ,WAAO,SAFK;AAGZ,YAAQ,CAHI;AAIZ,aAAS,GAJG;AAKZ,UAAM,IALM;AAMZ,eAAW,IANC,EAMM;AAClB,iBAAa,GAPD;AAQZ,eAAW;AARC,GADsC;AAWpD,cAAY,IAXwC;AAYpD,UAAQ,IAZ4C,EAYhC;AACpB,QAAM,IAb8C,EAahC;AACpB,UAAQ,KAd4C,CAchC;AAdgC,CAAtD,C,CAnBA;;;;;;;;;;IAoCqB,M;;;;;;;;;;+BAMR,G,EAAY,O,EAAsC;AAC3D;AACA,WAAK,IAAL,GAAY,OAAO,IAAnB;;AAEA,WAAK,iBAAL,GAAyB,eAAU,IAAV,CAAe,QAAf,CAAwB,MAAxB,CAA+B,OAA/B,CAAuC,KAAhE;AACA;AACA,+HAAiB,GAAjB,EAAsB,OAAtB;AACD;;;+BAEU,M,EAAwB;AACjC,UAAI,CAAC,KAAK,MAAV,EAAkB;AAChB,aAAK,MAAL,GAAc,IAAI,kBAAE,MAAN,CACZ,KAAK,YADO,EAEZ,KAAK,YAAL,CAAkB,UAAlB,CAA6B,MAA7B,CAFY,EAGZ,KAAK,OAAL,CAAa,YAHD,CAAd;AAIA,aAAK,IAAL,CAAU,QAAV,CAAmB,KAAK,MAAxB;AACD,OAND,MAMO;AACL,aAAK,MAAL,CAAY,SAAZ,CAAsB,KAAK,YAAL,CAAkB,UAAlB,CAA6B,MAA7B,CAAtB;AACD;AACF;;;wCAEyB;AACxB,UAAM,SAAS,IAAI,kBAAE,MAAN,CACb,KAAK,YADQ,EAEb,KAAK,MAAL,CAAY,SAAZ,EAFa,EAGb,KAAK,OAAL,CAAa,YAHA,CAAf;AAIA,sIAAwB,MAAxB;AACD;;;iCAEY,K,EAAiC;AAC5C,UAAM,SAAS,MAAM,MAArB;AACA,UAAM,aAAa,KAAK,OAAL,CAAa,UAAhC;AACA,UAAM,YAAY,KAAK,OAAL,CAAa,MAA/B;AACA,UAAI,eAAJ;;AAEA,WAAK,QAAL,CAAc,cAAd,CAA6B,MAA7B;AACA,UAAI,KAAK,UAAT,EAAqB;AACnB,aAAK,UAAL,CAAgB,MAAhB;;AAEA;AACA,iBAAS,KAAK,MAAL,CAAY,SAAZ,GAAwB,OAAxB,CAAgC,CAAhC,CAAT;;AAEA,YAAM,UAAU,aACT,eAAU,IAAV,CAAe,QAAf,CAAwB,MAAxB,CAA+B,MADtB,UACiC,oBAAa,gBAAb,CAC7C,MAD6C,EAE7C,SAF6C,EAG7C,KAAK,OAAL,CAAa,IAHgC,EAI7C,KAAK,OAAL,CAAa,MAJgC,CADjC,GAMZ,EANJ;AAOA,aAAK,QAAL,CAAc,aAAd,CAA4B;AAC1B,gBAAM,KAAK,aADe;AAE1B;AAF0B,SAA5B;AAID;AACF;;;;;AA5DkB,M,CAGZ,O,GAAU,sB;AAHE,M,CAIZ,I;kBAJY,M","file":"Circle.js","sourcesContent":["/** @flow\n * StratoDem Analytics : Draw.Circle\n * Principal Author(s) : Michael Clawar\n * Secondary Author(s) :\n * Description :\n *\n *  (c) 2016- StratoDem Analytics, LLC\n *  All Rights Reserved\n */\n\nimport L from 'leaflet';\n\nimport drawLocal from '../../draw';\nimport { GeometryUtil } from '../../ext/index';\nimport SimpleShape from './SimpleShape';\nimport type { T_SIMPLESHAPE_OPTIONS } from './SimpleShape';\nimport { TYPE_CIRCLE } from './constants';\n\n\nconst DEFAULT_CIRCLE_OPTIONS: T_SIMPLESHAPE_OPTIONS = {\n  shapeOptions: {\n    stroke: true,\n    color: '#3388ff',\n    weight: 4,\n    opacity: 0.5,\n    fill: true,\n    fillColor: null,  // same as color by default\n    fillOpacity: 0.2,\n    clickable: true,\n  },\n  showRadius: true,\n  metric: true,       // Whether to use the metric measurement system or imperial\n  feet: true,         // When not metric, use feet instead of yards for display\n  nautic: false,      // When not metric, not feet use nautic mile for display\n};\n\nexport default class Circle extends SimpleShape {\n  _initialLabelText: string;\n\n  static options = DEFAULT_CIRCLE_OPTIONS;\n  static type = TYPE_CIRCLE;\n\n  initialize(map: L.Map, options: T_SIMPLESHAPE_OPTIONS): void {\n    // Save the type so super can fire, need to do this as cannot do this.TYPE :(\n    this.type = Circle.TYPE;\n\n    this._initialLabelText = drawLocal.draw.handlers.circle.tooltip.start;\n    // TODO options\n    super.initialize(map, options);\n  }\n\n  _drawShape(latlng: L.LatLng): void {\n    if (!this._shape) {\n      this._shape = new L.Circle(\n        this._startLatLng,\n        this._startLatLng.distanceTo(latlng),\n        this.options.shapeOptions);\n      this._map.addLayer(this._shape);\n    } else {\n      this._shape.setRadius(this._startLatLng.distanceTo(latlng));\n    }\n  }\n\n  _fireCreatedEvent(): void {\n    const circle = new L.Circle(\n      this._startLatLng,\n      this._shape.getRadius(),\n      this.options.shapeOptions);\n    super._fireCreatedEvent(circle);\n  }\n\n  _onMouseMove(event: {latlng: L.LatLng}): void {\n    const latlng = event.latlng;\n    const showRadius = this.options.showRadius;\n    const useMetric = this.options.metric;\n    let radius;\n\n    this._tooltip.updatePosition(latlng);\n    if (this._isDrawing) {\n      this._drawShape(latlng);\n\n      // Get the new radius (rounded to 1 dp)\n      radius = this._shape.getRadius().toFixed(1);\n\n      const subtext = showRadius\n        ? `${drawLocal.draw.handlers.circle.radius}: ${GeometryUtil.readableDistance(\n          radius,\n          useMetric,\n          this.options.feet,\n          this.options.nautic)}`\n        : '';\n      this._tooltip.updateContent({\n        text: this._endLabelText,\n        subtext,\n      });\n    }\n  }\n}\n"]}