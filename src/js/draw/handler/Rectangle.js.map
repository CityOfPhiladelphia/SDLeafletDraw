{"version":3,"sources":["../../../es6/draw/handler/Rectangle.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA;;;;AAEA;;;;AACA;;AACA;;;;AAEA;;;;AAGA,IAAM,4BAA4B;AAChC,gBAAc;AACZ,YAAQ,IADI;AAEZ,WAAO,SAFK;AAGZ,YAAQ,CAHI;AAIZ,aAAS,GAJG;AAKZ,UAAM,IALM;AAMZ,eAAW,IANC,EAMQ;AACpB,iBAAa,GAPD;AAQZ,cAAU,IARE;AASZ,eAAW;AATC,GADkB;AAYhC,UAAQ,IAZwB,CAYV;AAZU,CAAlC,C,CAnBA;;;;;;;;;;IAkCqB,S;;;;;;;;;;+BAIR,G,EAAY,O,EAAsC;AAC3D;AACA,WAAK,IAAL,GAAY,UAAU,IAAtB;;AAEA,WAAK,iBAAL,GAAyB,eAAU,IAAV,CAAe,QAAf,CAAwB,SAAxB,CAAkC,OAAlC,CAA0C,KAAnE;AACA,qIAAiB,GAAjB,6BACK,UAAU,OADf,EAEK,OAFL;AAGE,iDACK,UAAU,OAAV,CAAkB,YADvB,EAEK,OAAO,OAAP,KAAmB,WAAnB,IAAkC,QAAQ,YAAR,KAAyB,WAA3D,GACC,QAAQ,YADT,GAEC,EAJN;AAHF;AAUD;;;+BAEU,M,EAAwB;AACjC,UAAI,CAAC,KAAK,MAAV,EAAkB;AAChB,aAAK,MAAL,GAAc,IAAI,kBAAE,SAAN,CACZ,IAAI,kBAAE,YAAN,CAAmB,KAAK,YAAxB,EAAsC,MAAtC,CADY,EACmC,KAAK,OAAL,CAAa,YADhD,CAAd;AAEA,aAAK,IAAL,CAAU,QAAV,CAAmB,KAAK,MAAxB;AACD,OAJD,MAIO;AACL,aAAK,MAAL,CAAY,SAAZ,CAAsB,IAAI,kBAAE,YAAN,CAAmB,KAAK,YAAxB,EAAsC,MAAtC,CAAtB;AACD;AACF;;;wCAEyB;AACxB,UAAM,YAAY,IAAI,kBAAE,SAAN,CAAgB,KAAK,MAAL,CAAY,SAAZ,EAAhB,EAAyC,KAAK,OAAL,CAAa,YAAtD,CAAlB;AACA,4IAAwB,SAAxB;AACD;;;sCAEmD;AAClD,UAAM,iJAAN;AACA,UAAM,QAAQ,KAAK,MAAnB;AACA,UAAM,WAAW,KAAK,OAAL,CAAa,QAA9B;AACA,UAAI,gBAAJ;AACA,UAAI,aAAJ;AACA,UAAI,gBAAJ;;AAEA,UAAI,KAAJ,EAAW;AACT,kBAAU,KAAK,MAAL,CAAY,aAAZ,GAA4B,KAAK,MAAL,CAAY,aAAZ,EAA5B,GAA0D,KAAK,MAAL,CAAY,UAAZ,EAApE;AACA,eAAO,oBAAa,YAAb,CAA0B,OAA1B,CAAP;AACA,kBAAU,WAAW,oBAAa,YAAb,CAA0B,IAA1B,EAAgC,KAAK,OAAL,CAAa,MAA7C,CAAX,GAAkE,EAA5E;AACD;;AAED,aAAO;AACL,cAAM,YAAY,IADb;AAEL;AAFK,OAAP;AAID;;;;;AAtDkB,S,CACZ,I;AADY,S,CAEZ,O,GAAU,yB;kBAFE,S","file":"Rectangle.js","sourcesContent":["/** @flow\n * StratoDem Analytics : Rectangle\n * Principal Author(s) : Michael Clawar\n * Secondary Author(s) :\n * Description :\n *\n *  (c) 2016- StratoDem Analytics, LLC\n *  All Rights Reserved\n */\n\nimport L from 'leaflet';\n\nimport drawLocal from '../../draw';\nimport { GeometryUtil } from '../../ext/index';\nimport SimpleShape from './SimpleShape';\nimport type { T_SIMPLESHAPE_OPTIONS } from './SimpleShape';\nimport { TYPE_RECTANGLE } from './constants';\n\n\nconst DEFAULT_RECTANGLE_OPTIONS = {\n  shapeOptions: {\n    stroke: true,\n    color: '#3388ff',\n    weight: 4,\n    opacity: 0.5,\n    fill: true,\n    fillColor: null,    // same as color by default\n    fillOpacity: 0.2,\n    showArea: true,\n    clickable: true,\n  },\n  metric: true,         // Whether to use the metric measurement system or imperial\n};\n\nexport default class Rectangle extends SimpleShape {\n  static TYPE = TYPE_RECTANGLE;\n  static options = DEFAULT_RECTANGLE_OPTIONS;\n\n  initialize(map: L.Map, options: T_SIMPLESHAPE_OPTIONS): void {\n    // Save the type so super can fire, need to do this as cannot do this.TYPE :(\n    this.type = Rectangle.TYPE;\n\n    this._initialLabelText = drawLocal.draw.handlers.rectangle.tooltip.start;\n    super.initialize(map, {\n      ...Rectangle.options,\n      ...options,\n      shapeOptions: {\n        ...Rectangle.options.shapeOptions,\n        ...typeof options !== 'undefined' && options.shapeOptions !== 'undefined'\n          ? options.shapeOptions\n          : {},\n      },\n    });\n  }\n\n  _drawShape(latlng: L.LatLng): void {\n    if (!this._shape) {\n      this._shape = new L.Rectangle(\n        new L.LatLngBounds(this._startLatLng, latlng), this.options.shapeOptions);\n      this._map.addLayer(this._shape);\n    } else {\n      this._shape.setBounds(new L.LatLngBounds(this._startLatLng, latlng));\n    }\n  }\n\n  _fireCreatedEvent(): void {\n    const rectangle = new L.Rectangle(this._shape.getBounds(), this.options.shapeOptions);\n    super._fireCreatedEvent(rectangle);\n  }\n\n  _getTooltipText(): {text: string, subtext?: string} {\n    const tooltipText = super._getTooltipText();\n    const shape = this._shape;\n    const showArea = this.options.showArea;\n    let latLngs;\n    let area;\n    let subtext;\n\n    if (shape) {\n      latLngs = this._shape._defaultShape ? this._shape._defaultShape() : this._shape.getLatLngs();\n      area = GeometryUtil.geodesicArea(latLngs);\n      subtext = showArea ? GeometryUtil.readableArea(area, this.options.metric) : '';\n    }\n\n    return {\n      text: tooltipText.text,\n      subtext,\n    };\n  }\n}\n"]}