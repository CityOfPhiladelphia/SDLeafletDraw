{"version":3,"sources":["../../../es6/draw/handler/Polygon.js"],"names":[],"mappings":"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","file":"Polygon.js","sourcesContent":["/** @flow\n * StratoDem Analytics : Polygon\n * Principal Author(s) : Michael Clawar\n * Secondary Author(s) :\n * Description :\n *\n *  (c) 2016- StratoDem Analytics, LLC\n *  All Rights Reserved\n */\n\nimport L from 'leaflet';\n\nimport drawLocal from '../../draw';\nimport Polyline from './Polyline';\nimport { TYPE_POLYGON } from './constants';\nimport { GeometryUtil } from '../../ext/index';\n\n\ntype T_POLYGON_OPTIONS = {\n  allowIntersection?: boolean,\n  repeatMode?: boolean,\n  drawError?: {\n    color?: string,\n    timeout?: number,\n  },\n  icon?: L.Icon | L.DivIcon,\n  touchIcon?: L.Icon | L.DivIcon,\n  guidelineDistance?: number,\n  maxGuideLineLength?: number,\n  shapeOptions?: {\n    stroke?: boolean,\n    color?: string,\n    weight?: number,\n    opacity?: number,\n    fill?: boolean,\n    clickable?: boolean,\n  },\n  metric?: boolean,\n  feet?: boolean,\n  nautic?: boolean,\n  showLength?: boolean,\n  zIndexOffset?: number,\n};\n\nconst DEFAULT_POLYGON_OPTIONS: T_POLYGON_OPTIONS = {\n  showArea: false,\n  showLength: false,\n  shapeOptions: {\n    stroke: true,\n    color: '#3388ff',\n    weight: 4,\n    opacity: 0.5,\n    fill: true,\n    fillColor: null,          // same as color by default\n    fillOpacity: 0.2,\n    clickable: true,\n  },\n  // Whether to use the metric measurement system (truthy) or not (falsy).\n  // Also defines the units to use for the metric system as an array of\n  // strings (e.g. `['ha', 'm']`).\n  metric: true,\n  feet: true, // When not metric, to use feet instead of yards for display.\n  nautic: false, // When not metric, not feet use nautic mile for display\n  // Defines the precision for each type of unit (e.g. {km: 2, ft: 0}\n  precision: {},\n};\n\n\nexport default class Polygon extends Polyline {\n  static TYPE = TYPE_POLYGON;\n  static Poly = L.Polygon;\n  static options = DEFAULT_POLYGON_OPTIONS;\n\n  initialize(map: L.Map, options: T_POLYGON_OPTIONS): void {\n    super.initialize(map, {\n      ...Polygon.options,\n      ...options,\n      drawError: {\n        ...Polygon.drawError,\n        ...typeof options.drawError !== 'undefined' ? options.drawError : {},\n      },\n    });\n\n    this.Poly = Polygon.Poly;\n    // Save the type so super can fire, need to do this as cannot do this.TYPE :(\n    this.type = Polygon.TYPE;\n  }\n\n  _updateFinishHandler(): void {\n    const markerCount = this._markers.length;\n\n    // The first marker should have a click handler to close the polygon\n    if (markerCount === 1)\n      this._markers[0].on('click', this._finishShape, this);\n\n    // Add and update the double click handler\n    if (markerCount > 2) {\n      this._markers[markerCount - 1].on('dblclick', this._finishShape, this);\n      // Only need to remove handler if has been added before\n      if (markerCount > 3)\n        this._markers[markerCount - 2].off('dblclick', this._finishShape, this);\n    }\n  }\n\n  _getTooltipText(): {text: string, subtext?: string} {\n    let text;\n    let subtext;\n\n    if (this._markers.length === 0) {\n      text = drawLocal.draw.handlers.polygon.tooltip.start;\n    } else if (this._markers.length < 3) {\n      text = drawLocal.draw.handlers.polygon.tooltip.cont;\n      subtext = this._getMeasurementString();\n    } else {\n      text = drawLocal.draw.handlers.polygon.tooltip.end;\n      subtext = this._getMeasurementString();\n    }\n\n    return {text, subtext};\n  }\n\n  _getMeasurementString(): string {\n    const area = this._area;\n    let measurementString = '';\n\n\n    if (!area && !this.options.showLength)\n      return measurementString;\n\n    if (this.options.showLength)\n      measurementString = super._getMeasurementString();\n\n    if (area)\n      measurementString\n        += `<br>${GeometryUtil.readableArea(area, this.options.metric, this.options.precision)}`;\n\n    return measurementString;\n  }\n\n  _shapeIsValid(): boolean {\n    return this._markers.length >= 3;\n  }\n\n  _vertexChanged(latlng: L.LatLng, added: boolean): void {\n    // Check to see if we should show the area\n    if (!this.options.allowIntersection && this.options.showArea) {\n      const latLngs = this._poly.getLatLngs();\n\n      this._area = GeometryUtil.geodesicArea(latLngs);\n    }\n\n    super._vertexChanged(latlng, added);\n  }\n\n  _cleanUpShape(): void {\n    const markerCount = this._markers.length;\n\n    if (markerCount > 0) {\n      this._markers[0].off('click', this._finishShape, this);\n\n      if (markerCount > 2)\n        this._markers[markerCount - 1].off('dblclick', this._finishShape, this);\n    }\n  }\n}\n"]}