{"version":3,"sources":["../../es6/ext/Polygon.Intersect.js"],"names":[],"mappings":";;AAUA;;;;;;AAGA,kBAAE,OAAF,CAAU,OAAV,CAAkB;AAChB;AACA,YAFgB,wBAEM;AACpB,QAAI,KAAK,4BAAL,EAAJ,EACE,OAAO,KAAP;;AAEF,QAAM,SAAS,KAAK,mBAAL,EAAf;AACA,QAAM,qBAAqB,kBAAE,QAAF,CAAW,SAAX,CAAqB,UAArB,CAAgC,IAAhC,CAAqC,IAArC,CAA3B;;AAEA;AACA,QAAI,kBAAJ,EACE,OAAO,IAAP;;AAEF,QAAM,MAAM,OAAO,MAAnB;AACA,QAAM,aAAa,OAAO,CAAP,CAAnB;AACA,QAAM,YAAY,OAAO,MAAM,CAAb,CAAlB;AACA,QAAM,WAAW,MAAM,CAAvB;;AAEA;AACA;AACA,WAAO,KAAK,4BAAL,CAAkC,SAAlC,EAA6C,UAA7C,EAAyD,QAAzD,EAAmE,CAAnE,CAAP;AACD;AArBe,CAAlB,E,CAbA","file":"Polygon.Intersect.js","sourcesContent":["/** @flow\n * StratoDem Analytics : Polygon.Intersect\n * Principal Author(s) : Michael Clawar\n * Secondary Author(s) :\n * Description :\n *\n *  (c) 2016- StratoDem Analytics, LLC\n *  All Rights Reserved\n */\n\nimport L from 'leaflet';\n\n\nL.Polygon.include({\n  /** Checks a polygon for any intersecting line segments. Ignores holes. **/\n  intersects(): boolean {\n    if (this._tooFewPointsForIntersection())\n      return false;\n\n    const points = this._getProjectedPoints();\n    const polylineIntersects = L.Polyline.prototype.intersects.call(this);\n\n    // If already found an intersection don't need to check for any more.\n    if (polylineIntersects)\n      return true;\n\n    const len = points.length;\n    const firstPoint = points[0];\n    const lastPoint = points[len - 1];\n    const maxIndex = len - 2;\n\n    // Check the line segment between last and first point.\n    // Don't need to check the first line segment (minIndex = 1)\n    return this._lineSegmentsIntersectsRange(lastPoint, firstPoint, maxIndex, 1);\n  },\n});\n"]}