{"version":3,"sources":["../../es6/ext/GeometryUtil.js"],"names":[],"mappings":"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","file":"GeometryUtil.js","sourcesContent":["/** @flow\n * StratoDem Analytics : GeometryUtil\n * Principal Author(s) : Michael Clawar\n * Secondary Author(s) :\n * Description :\n *\n *  (c) 2016- StratoDem Analytics, LLC\n *  All Rights Reserved\n */\n\nimport L from 'leaflet';\n\nimport drawLocal from '../draw';\n\nconst defaultPrecision = {\n  km: 2,\n  ha: 2,\n  m: 0,\n  mi: 2,\n  ac: 2,\n  yd: 0,\n  ft: 0,\n  nm: 2,\n};\n\n// TODO import me and add to Leaflet\nconst GeometryUtil = L.extend(L.GeometryUtil || {}, {\n  /** Ported from the OpenLayers implementation.\n   * See:\n   * https://github.com/openlayers/openlayers/blob/master/lib/OpenLayers/Geometry/LinearRing.js#L270\n   */\n  geodesicArea(latLngs: Array<L.LatLng>): number {\n    let area = 0.0;\n    const d2r = Math.PI / 180;\n\n    if (latLngs.length > 2) {\n      latLngs.forEach((p1, idx) => {\n        const p2 = latLngs[(idx + 1) % latLngs.length];\n\n        area += ((p2.lng - p1.lng) * d2r)\n          * (2 + Math.sin(p1.lat * d2r) + Math.sin(p2.lat * d2r));\n      });\n      area = (area * 6378137.0) * (6378137.0 / 2.0);\n    }\n\n    return Math.abs(area);\n  },\n\n  /** Returns n in specified number format (if defined) and precision **/\n  formattedNumber(n: number, precision: number): string {\n    let formatted = n.toFixed(precision);\n    const format = drawLocal.format && drawLocal.format.numeric;\n    const delimiters = format && format.delimiters;\n    const thousands = delimiters && delimiters.thousands;\n    let decimal = delimiters && delimiters.decimal;\n\n    if (thousands || decimal) {\n      const splitValue = formatted.split('.');\n      formatted = thousands\n        ? splitValue[0].replace(/(\\d)(?=(\\d{3})+(?!\\d))/g, `$1${thousands}`)\n        : splitValue[0];\n      decimal = decimal || '.';\n      if (splitValue.length > 1) {\n        formatted = formatted + decimal + splitValue[1];\n      }\n    }\n\n    return formatted;\n  },\n\n  /**\n   * Returns a readable area string in yards or metric\n   * The value will be rounded as defined by the precision option object\n   */\n  readableArea(area: number, isMetric: boolean, precision: Object): string {\n    const lPrecision = L.Util.extend({}, defaultPrecision, precision);\n\n    let areaStr = '';\n\n    if (isMetric) {\n      let units = ['ha', 'm'];\n      if (typeof isMetric === 'string')\n        units = [isMetric];\n      else if (typeof isMetric !== 'boolean')\n        units = isMetric;\n\n      if (area >= 1000000 && units.indexOf('km') !== -1) {\n        areaStr = `${GeometryUtil.formattedNumber(area * 0.000001, lPrecision.km)} km²`;\n      } else if (area >= 10000 && units.indexOf('ha') !== -1) {\n        areaStr = `${GeometryUtil.formattedNumber(area * 0.0001, lPrecision.ha)} ha`;\n      } else {\n        areaStr = `${GeometryUtil.formattedNumber(area, lPrecision.m)} m²`;\n      }\n    } else {\n      const nextArea = area / 0.836127; // Square yards in 1 meter\n\n      if (nextArea >= 3097600) { // 3097600 square yards in 1 square mile\n        areaStr = `${GeometryUtil.formattedNumber(nextArea / 3097600, lPrecision.mi)} mi²`;\n      } else if (nextArea >= 4840) { // 4840 square yards in 1 acre\n        areaStr = `${GeometryUtil.formattedNumber(nextArea / 4840, lPrecision.ac)} acres`;\n      } else {\n        areaStr = `${GeometryUtil.formattedNumber(nextArea, lPrecision.yd)} yd²`;\n      }\n    }\n\n    return areaStr;\n  },\n\n  /**\n   * Converts a metric distance to one of { feet, nauticalMile, metric, yards }\n   */\n  readableDistance(distance: number, isMetric: boolean, isFeet: boolean,\n                   isNauticalMile: boolean, precision: Object): string {\n    const lPrecision = L.Util.extend({}, defaultPrecision, precision);\n    let distanceStr;\n    let lDistance;\n    let units;\n\n    if (isMetric) {\n      units = typeof isMetric === 'string' ? isMetric : 'metric';\n    } else if (isFeet) {\n      units = 'feet';\n    } else if (isNauticalMile) {\n      units = 'nauticalMile';\n    } else {\n      units = 'yards';\n    }\n\n    switch (units) {\n      case 'metric':\n        // show metres when distance is < 1km, then show km\n        if (distance > 1000) {\n          distanceStr = `${GeometryUtil.formattedNumber(distance / 1000, lPrecision.km)} km`;\n        } else {\n          distanceStr = `${GeometryUtil.formattedNumber(distance, lPrecision.m)} m`;\n        }\n        break;\n      case 'feet':\n        lDistance = distance * 1.09361 * 3;\n        distanceStr = `${GeometryUtil.formattedNumber(lDistance, lPrecision.ft)} ft`;\n\n        break;\n      case 'nauticalMile':\n        lDistance = distance * 0.53996;\n        distanceStr = `${GeometryUtil.formattedNumber(lDistance / 1000, lPrecision.nm)} nm`;\n        break;\n      case 'yards':\n      default:\n        lDistance = distance * 1.09361;\n\n        if (distance > 1760) {\n          distanceStr = `${GeometryUtil.formattedNumber(lDistance / 1760, lPrecision.mi)} miles`;\n        } else {\n          distanceStr = `${GeometryUtil.formattedNumber(lDistance, lPrecision.yd)} yards`;\n        }\n        break;\n    }\n    return distanceStr;\n  },\n});\n\nexport default GeometryUtil;\n"]}